 * 2.反转字符串 (Reverse String)
      题目描述：反转一个字符串。输入 "abcde"，输出 "edcba"
    */
// SPDX-License-Identifier: MIT
pragma solidity ^0.8;


   contract ReverseString{
    function Reserve(string calldata str)public pure  returns(string memory){
        bytes memory srcBytesStr = bytes(str);
        bytes memory destBytesStr = new bytes(srcBytesStr.length);
        for(uint i=0;i<srcBytesStr.length;i++){
            destBytesStr[i] = srcBytesStr[srcBytesStr.length - 1-i];
        }
        return string(destBytesStr);
    }
}

    /**
    * 3.用 solidity 实现整数转罗马数字
    * 
      题目描述在 https://leetcode.cn/problems/integer-to-roman/description/
      I->1
      V->5
      X->10
      L->50
      C->100
      D->500
      M->1000

    // SPDX-License-Identifier: MIT
pragma solidity ^0.8;

contract IntToRoman {
    // 定义罗马数字符号数组
    string[] private romanSymbols = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
    // 定义对应的数值数组
    uint256[] private romanValues = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];

    // 公共函数，将整数转换为罗马数字
    function convert(uint256 number) public view returns (string memory) {
         require(number > 0 && number <= 3999, "Number out of range");
        // 初始化结果字符串
        string memory result = "";

        // 遍历罗马数值数组
        for (uint256 i = 0; i < romanValues.length; i++) {
            // 当前数值可以被整除时，添加相应的罗马符号
            while (number >= romanValues[i]) {
                result = string(abi.encodePacked(result, romanSymbols[i]));
                number -= romanValues[i];
            }
        }

        // 返回结果字符串
        return result;
    }
}

    /**4.用 solidity 实现罗马数字转数整数
    //将罗马数字转换成整数


contract romanTtointContract{

    mapping (string => uint256) public numeralMapping;
    constructor(){
        numeralMapping["I"] = 1;
        numeralMapping["V"] = 5;
        numeralMapping["X"] = 10;
        numeralMapping["L"] = 50;
        numeralMapping["C"] = 100;
        numeralMapping["D"] = 500;
        numeralMapping["M"] = 1000;
    }

    function romanStringToInt(string memory ronman) public view returns (uint){
        bytes memory ronmanBytes = bytes(ronman);
        uint beforeNum;
        uint totalNum;
        for (uint i=0; i < ronmanBytes.length; i++){
            uint j = numeralMapping[string(abi.encodePacked((ronmanBytes[i])))];
            if( j != 0 && j > beforeNum){
                j = j - 2*beforeNum ;
            }
            beforeNum = j;
            totalNum += j;
        }
        return totalNum;
    }

}
5.将两个有序数组合并为一个有序数组。
// SPDX-License-Identifier: MIT
pragma solidity ^0.8;


contract MergeArrayContract{
    uint[] public a = [1,3,5,7,9];
    uint[] public b = [2,4,6,8,10,11, 12];
    uint[] public c = new uint[](a.length + b.length);

    function mergeArrayFucn() public {
        uint al = a.length;
        uint bl = b.length;
        uint ai = 0;
        uint bi = 0;
        uint ci = 0;

        while (ai < al && bi< bl){
            if (a[ai] > b[bi]) {
                c[ci++] = b[bi];
                bi ++;
            } else{
                c[ci++] = a[ai];
                ai += 1;
            }
        }

        while (ai < al && ci<bl){
            c[ci++] = a[ai];
            ai++;
        }
        while (bi < bl) {
            c[ci++] = b[bi];
            bi++;
        }
    }
}

    /**
     * 6.二分查找 (Binary Search)
     * 题目描述：在一个有序数组中查找目标值。
     * [1,2,3]  index=2,length=3
     * [1,2,3,4,5,6,7,8,9]
     * 9/2=4.5
     */
    function binarySearch(
        uint256[] memory arr1,
        uint256 target
    ) public pure returns (int256) {
        uint256 start = 0;
        uint256 end = arr1.length - 1;
        if (arr1[0] == target) {
            return 0;
        }
        while (start <= end) {
            uint256 i = start + (end - start) / 2;
            //如果大于目标值说明arr[i] 是end
            if (arr1[i] == target) {
                return int256(i);
            } else if (arr1[i] < target) {
                //如果小于目标值说明arr[i] 是start
                start = i + 1;
            } else if (arr1[i] > target) {
                //都不是  就是相等
                end = i - 1;
            }
        }
        return -1;
    }
}
